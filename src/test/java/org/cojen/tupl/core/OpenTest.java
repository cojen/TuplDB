/*
 *  Copyright (C) 2024 Cojen.org
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package org.cojen.tupl.core;

import java.io.File;
import java.io.FileWriter;

import org.junit.*;
import static org.junit.Assert.*;

import org.cojen.tupl.*;

import org.cojen.tupl.io.Utils;

import static org.cojen.tupl.TestUtils.*;

/**
 * 
 *
 * @author Brian S. O'Neill
 */
public class OpenTest {
    public static void main(String[] args) throws Exception {
        org.junit.runner.JUnitCore.main(OpenTest.class.getName());
    }

    private static String sourceFile;

    @BeforeClass
    public static void createSourceFile() throws Exception {
        String src = """
            import java.io.*;

            public class Test {
                public static void main(String[] args) throws Exception {
                    boolean readOnly = false;

                    if (args.length > 1 && args[1].equals("r")) {
                        readOnly = true;
                    }

                    var file = new File(args[0] + ".lock");
                    var raf = new RandomAccessFile(file, readOnly ? "r" : "rw");
                    var lock = raf.getChannel().tryLock(8, Long.MAX_VALUE - 8, readOnly);

                    if (!readOnly) {
                        raf.writeLong(ProcessHandle.current().pid());
                    }

                    System.out.println(readOnly ? "r" : "w");

                    for (int i=0; i<Integer.MAX_VALUE; i++) {
                        Thread.sleep(9999999999999L);
                    }

                    System.out.println(lock);
                }
            }
        """;

        File file = new File(newTempBaseFile(OpenTest.class) + ".java");
        sourceFile = file.getPath();

        try (var writer = new FileWriter(file)) {
            writer.write(src);
        }
    }

    @AfterClass
    public static void deleteSourceFile() throws Exception {
        if (sourceFile != null) {
            Utils.delete(new File(sourceFile));
        }
    }

    @After
    public void teardown() throws Exception {
        deleteTempDatabases(getClass());
    }

    @Test
    public void openTwiceSameProcess() throws Exception {
        var config = new DatabaseConfig();
        Database db = newTempDatabase(getClass(), config);

        try {
            Database.open(config);
            fail();
        } catch (DatabaseException e) {
            assertTrue(e.getMessage().contains("open in the current process"));
        }

        config.readOnly(true);

        try {
            Database.open(config);
            fail();
        } catch (DatabaseException e) {
            assertTrue(e.getMessage().contains("open in the current process"));
        }
    }

    @Test
    public void openTwiceDifferentProcess() throws Exception {
        var config = new DatabaseConfig();
        Database db = newTempDatabase(getClass(), config);
        File baseFile = baseFileForTempDatabase(getClass(), db);
        db.close();

        Process p = new ProcessBuilder("java", sourceFile, baseFile.getPath()).start();

        int c = p.getInputStream().read();
        assertEquals('w', c);

        try {
            reopenTempDatabase(getClass(), db, config);
            fail();
        } catch (DatabaseException e) {
            assertTrue(e.getMessage().contains("open and locked by another process"));
            assertTrue(e.getMessage().contains("" + p.pid()));
        } finally {
            p.destroyForcibly().waitFor();
        }
    }

    @Test
    public void openReadOnly() throws Exception {
        var config = new DatabaseConfig();
        Database db = newTempDatabase(getClass(), config);
        Index ix = db.openIndex("test");
        ix.store(null, "hello".getBytes(), "world".getBytes());
        db.checkpoint();
        db.close();

        config.readOnly(true);
        db = Database.open(config);
        try {
            ix = db.findIndex("test");
            assertNotNull(ix);
            fastAssertArrayEquals("world".getBytes(), ix.load(null, "hello".getBytes()));

            int i = 0;
            try {
                for (; i<1_000_000; i++) {
                    byte[] key = ("key-" + i).getBytes();
                    ix.store(null, key, key);
                }
                fail();
            } catch (DatabaseFullException e) {
                assertTrue(e.getMessage().contains("read only"));
                assertTrue(i > 0);
            }
        } finally {
            db.close();
        }
    }

    @Test
    public void openReadOnlyDifferentProcess() throws Exception {
        var config = new DatabaseConfig();
        Database db = newTempDatabase(getClass(), config);
        Index ix = db.openIndex("test");
        ix.store(null, "hello".getBytes(), "world".getBytes());
        File baseFile = baseFileForTempDatabase(getClass(), db);
        db.checkpoint();
        db.close();

        Process p = new ProcessBuilder("java", sourceFile, baseFile.getPath(), "r").start();

        try {
            int c = p.getInputStream().read();
            assertEquals('r', c);

            config.readOnly(true);
            db = reopenTempDatabase(getClass(), db, config);
            ix = db.findIndex("test");
            assertNotNull(ix);
            fastAssertArrayEquals("world".getBytes(), ix.load(null, "hello".getBytes()));

            int i = 0;
            try {
                for (; i<1_000_000; i++) {
                    byte[] key = ("key-" + i).getBytes();
                    ix.store(null, key, key);
                }
                fail();
            } catch (DatabaseFullException e) {
                assertTrue(e.getMessage().contains("read only"));
                assertTrue(i > 0);
            }
        } finally {
            p.destroyForcibly().waitFor();
        }
    }
}
